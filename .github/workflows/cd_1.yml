# name: CD

# on: # 발생 이벤트 타입
#   pull_request: # push 이벤트 발생 시
#     branches: # 타겟 브랜치
#       - main
      
# env:
#   AWS_REGION: ${{ secrets.AWS_RESION}}
#   ECR_REPOSITORY: pct-image-repo           # set this to your Amazon ECR repository name
#   ECS_SERVICE: pct-service                 # set this to your Amazon ECS service name
#   ECS_CLUSTER: pct-cluster                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: ./pct-task-definition.json # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: pct-image-repo           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition      
# jobs: # 실행 작업 코드
#   merge: # merge 실행
#     runs-on: ubuntu-latest

#     steps:
#       - name: change main branch # main 브랜치로 이동
#         uses: actions/checkout@v2
#         with:
#           ref: 'main'
#           fetch-depth: '0'
          
#       - name: git Config # git 셋팅
#         run: |
#           git config user.name dosalpark
#           git config user.email psh_a@naver.com
#           git remote set-url origin https://https://github.com/dosalpark/jenkinsTest.git

#       - name: merge the dev into the main # main 브랜치에 dev 브랜치를 merge
#         run: |
#           git merge origin/dev --no-edit

#       - name: Push changes to main branch # merge 내용들을 main 브랜치로 최종 push
#         uses: ad-m/github-push-action@master
#         with:
#           branch: main
#           github_token: ${{ secrets.REPO_KEY }}

#   upload: 
#     runs-on: ubuntu-latest
#     needs: merge
    
#     steps:
#       - name: JDK 17 setup # JDK 17 설치
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: "adopt"
          
#       - name: main branch clone # main branch build 전 clone
#         run: |
#           git clone --branch main https://github.com/dosalpark/jenkinsTest.git .
#           pwd
#           ls -al

#       # - name: Make application.properties # Application.properties 생성
#       #   run: |
#       #     mkdir ./src/main/resources
#       #     mkdir ./src/test/resources
          
#       #     cd ./src/main/resources
#       #     touch ./application.properties
#       #     echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties
#       #     ls -al

#       #     cd /home/runner/work/Spring-plus-week/Spring-plus-week/src/test/resources
#       #     touch ./application-test_properties
#       #     echo "${{ secrets.APPLICATION_TEST_PROPERTIES }}" > ./application-test.properties
#       #     ls -al

#       - name: Build with Gradle # project Build
#         run: |
#           chmod +x ./gradlew
#           ./gradlew clean build

#       - name: Docker build # Docker 이미지 생성
#         run: |
#           docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASS }}
#           docker build -f Dockerfile -t dosal/spring:latest .

#       - name: AWS-cli setup # AWS CLI 설치
#         run: |
#           sudo apt install unzip
#           sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#           sudo unzip awscliv2.zip
#           sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

#       - name: Configure AWS credientials  # AWS연결설정
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY}}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY}}
#           aws-region: ${{ secrets.AWS_RESION}}

#       - name: Login to Amazon ECR # ECR login
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
          
#       - name: AWS ECR upload # Docker image upload
#         id: build-image
#         run: |
#           aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 339713047224.dkr.ecr.ap-northeast-2.amazonaws.com
#           docker tag dosal/spring:latest 339713047224.dkr.ecr.ap-northeast-2.amazonaws.com/pct-image-repo:latest
#           docker push 339713047224.dkr.ecr.ap-northeast-2.amazonaws.com/pct-image-repo:latest 
#           echo "image= 339713047224.dkr.ecr.ap-northeast-2.amazonaws.com/pct-image-repo:latest" >> $GITHUB_OUTPUT
    
#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
          
